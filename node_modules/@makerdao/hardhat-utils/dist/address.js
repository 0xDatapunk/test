"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRandomAddresses = exports.getRandomAddress = exports.getAddressOfNextDeployedContract = void 0;
const ethers_1 = require("ethers");
const utils_1 = require("ethers/lib/utils");
/**
 * Get address of the future contract
 * @param signer
 * @param offset - default (0) means next address
 * @returns
 */
async function getAddressOfNextDeployedContract(signer, offset = 0) {
    return utils_1.getContractAddress({
        from: await signer.getAddress(),
        nonce: (await signer.getTransactionCount()) + offset,
    });
}
exports.getAddressOfNextDeployedContract = getAddressOfNextDeployedContract;
async function getRandomAddress() {
    const randomAddress = await ethers_1.Wallet.createRandom().getAddress();
    // we avoid "cheaper to use addresses" so gas cost is deterministic
    // https://medium.com/coinmonks/on-efficient-ethereum-addresses-3fef0596e263
    if (randomAddress.indexOf('00') !== -1) {
        return getRandomAddress();
    }
    else {
        return randomAddress;
    }
}
exports.getRandomAddress = getRandomAddress;
async function getRandomAddresses(n = 10) {
    const arr = [...Array(n).keys()];
    return await Promise.all(arr.map(getRandomAddress));
}
exports.getRandomAddresses = getRandomAddresses;
//# sourceMappingURL=address.js.map